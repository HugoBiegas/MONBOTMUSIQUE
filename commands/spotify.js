/**
 * Commande spotify - Permet de jouer de la musique depuis Spotify
 * avec qualit√© audio optimale
 */

const { PermissionFlagsBits } = require('discord.js');
const { searchSpotify, createSpotifyQueue, formatDuration } = require('../utils/spotifyManager');
const { calculateTotalDuration } = require('../utils/youtubeManager');
const logger = require('../utils/logger');
const config = require('../config.json');

module.exports = {
  name: 'spotify',
  description: 'Joue une chanson ou une playlist Spotify avec qualit√© optimale',
  async execute(message, args) {
    // V√©rifier que des arguments ont √©t√© fournis
    if (!args.length) {
      return message.reply('‚ùå Veuillez sp√©cifier une chanson ou une playlist Spotify!');
    }

    // V√©rifier si Spotify est configur√©
    if (!config.spotify || !config.spotify.clientId || !config.spotify.clientSecret) {
      return message.reply('‚ùå Configuration Spotify manquante! Veuillez configurer vos identifiants Spotify dans config.json.');
    }

    const query = args.join(' ');
    const voiceChannel = message.member.voice.channel;

    // V√©rifications pr√©liminaires
    if (!await verifyVoiceChannelPermissions(message, voiceChannel)) {
      return; // Les v√©rifications ont √©chou√©, un message d'erreur a d√©j√† √©t√© envoy√©
    }

    // Si ce n'est pas un lien Spotify, on ajuste la requ√™te
    let finalQuery = query;
    if (!query.includes('spotify.com')) {
      finalQuery = `spotify:${query}`; // Force la recherche Spotify
    }

    // Message de chargement
    const loadingMsg = await message.channel.send('üîç Recherche Spotify en cours...');

    try {
      // Recherche Spotify optimis√©e
      const searchResult = await searchSpotify(finalQuery, message.client.player, message.author);
      
      if (!searchResult.success) {
        loadingMsg.edit(searchResult.message);
        return;
      }
      
      // D√©bogage - v√©rifier le contenu des r√©sultats
      const { result } = searchResult;
      logger.debug(`Pistes Spotify trouv√©es: ${result.tracks.length}` + 
                  (result.playlist ? ` dans la playlist "${result.playlist.title}"` : ''));
      
      if (result.tracks.length > 0) {
        logger.debug(`Premi√®re piste Spotify: ${result.tracks[0].title}, URL: ${result.tracks[0].url || 'Non d√©finie'}`);
      }
      
      // Cr√©ation de la file d'attente optimis√©e pour Spotify
      const queue = createSpotifyQueue(
        message.client.player,
        message.guild,
        {
          channel: message.channel,
          client: message.client,
          requestedBy: message.author
        }
      );

      try {
        // Connexion au canal vocal si n√©cessaire
        if (!queue.connection) {
          await queue.connect(voiceChannel);
          logger.music(`Connect√© au canal vocal "${voiceChannel.name}" pour Spotify dans ${message.guild.name}`);
        }
      } catch (error) {
        message.client.player.nodes.delete(message.guild.id);
        loadingMsg.edit(`‚ùå Impossible de rejoindre le canal vocal: ${error.message}`);
        logger.error(`Erreur lors de la connexion au canal vocal`, error);
        return;
      }

      // Mise √† jour du message selon le type de r√©sultat
      if (result.playlist) {
        // Playlist Spotify d√©tect√©e
        queue.addTrack(result.tracks);
        
        // Calculer les informations de la playlist
        const trackCount = result.tracks.length;
        const totalDuration = formatDuration(calculateTotalDuration(result.tracks));
        const playlistTitle = result.playlist.title || 'Playlist Spotify';
        const playlistAuthor = result.playlist?.author?.name || 'Spotify';
        
        const playlistEmbed = `
‚úÖ **${trackCount} morceaux** de la playlist Spotify **${playlistTitle}** ont √©t√© ajout√©s √† la file d'attente!
‚è±Ô∏è Dur√©e totale: **${totalDuration}**
üë§ Cr√©√©e par: **${playlistAuthor}**
üéµ Lecture avec qualit√© audio optimale
        `.trim();
        
        loadingMsg.edit(playlistEmbed);
      } else {
        // Piste Spotify unique
        const track = result.tracks[0];
        queue.addTrack(track);
        
        const trackDuration = formatDuration(track.duration);
        const trackAuthor = track.author;
        
        const trackEmbed = `
‚úÖ **${track.title}** a √©t√© ajout√© √† la file d'attente!
üë§ Artiste: **${trackAuthor}**
‚è±Ô∏è Dur√©e: **${trackDuration}**
üéµ Lecture Spotify avec qualit√© audio optimale
        `.trim();
        
        loadingMsg.edit(trackEmbed);
      }

      // Lancer la lecture si n√©cessaire
      if (!queue.node.isPlaying()) {
        try {
          await queue.node.play();
          logger.music(`Lecture Spotify d√©marr√©e dans ${message.guild.name}`);
        } catch (playError) {
          logger.error(`Erreur lors du d√©marrage de la lecture Spotify`, playError);
          loadingMsg.edit(`‚ùå Erreur lors du d√©marrage de la lecture: ${playError.message}`);
        }
      }

    } catch (error) {
      logger.error(`Erreur lors de la commande spotify`, error);
      loadingMsg.edit(`‚ùå Une erreur s'est produite: ${error.message}`);
    }
  }
};

/**
 * V√©rifie les permissions du canal vocal
 * @param {Message} message - Message Discord
 * @param {VoiceChannel} voiceChannel - Canal vocal
 * @returns {Promise<boolean>} True si les v√©rifications sont pass√©es
 */
async function verifyVoiceChannelPermissions(message, voiceChannel) {
  // V√©rification du canal vocal
  if (!voiceChannel) {
    await message.reply('‚ùå Vous devez √™tre dans un canal vocal pour utiliser cette commande!');
    return false;
  }

  // Permissions
  const permissions = voiceChannel.permissionsFor(message.client.user);
  if (!permissions.has(PermissionFlagsBits.Connect) || !permissions.has(PermissionFlagsBits.Speak)) {
    await message.reply('‚ùå Je n\'ai pas les permissions pour rejoindre et parler dans votre canal vocal!');
    return false;
  }

  return true;
}